'use strict';

exports.__esModule = true;
exports.MicrophoneRecorder = undefined;

var _AudioContext = require('./AudioContext');

var _AudioContext2 = _interopRequireDefault(_AudioContext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var analyser = void 0;
var audioCtx = void 0;
var mediaRecorder = void 0;
var chunks = [];
var startTime = void 0;
var stream = void 0;
var blobObject = void 0;
var onStopCallback = void 0;

var constraints = { audio: true, video: false }; // constraints - only audio needed

navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;

var MicrophoneRecorder = exports.MicrophoneRecorder = function () {
  function MicrophoneRecorder(callback) {
    var _this = this;

    _classCallCheck(this, MicrophoneRecorder);

    this.startRecording = function () {
      var self = _this;

      audioCtx = _AudioContext2.default.getAudioContext();
      analyser = _AudioContext2.default.getAnalyser();

      startTime = Date.now();

      if (audioCtx.state === 'suspended') {
        audioCtx.resume();
      }

      if (mediaRecorder && mediaRecorder.state === 'paused') {
        mediaRecorder.resume();
        return;
      }

      if (mediaRecorder && mediaRecorder.state === 'inactive') {
        mediaRecorder.start(10);
        var source = audioCtx.createMediaStreamSource(stream);
        source.connect(analyser);
      }
    };

    var self = this;

    if (navigator.mediaDevices) {
      console.log('getUserMedia supported.');

      navigator.mediaDevices.getUserMedia(constraints).then(function (str) {
        stream = str;
        mediaRecorder = new MediaRecorder(str);
        mediaRecorder.onstop = _this.onStop;
        onStopCallback = callback;
        mediaRecorder.ondataavailable = function (event) {
          chunks.push(event.data);
        };
      });
    } else {
      alert('Unfortunately, your browser sucks.  Apple refuses to support the latest Web features in Safari.  Please tell them to upgrade the Safari Web browser.');
    }
    return this;
  }

  MicrophoneRecorder.prototype.stopRecording = function stopRecording() {
    if (mediaRecorder && mediaRecorder.state !== 'inactive') {
      mediaRecorder.stop();
      audioCtx.suspend();
    }
  };

  MicrophoneRecorder.prototype.onStop = function onStop(evt) {
    var blob = new Blob(chunks, { 'type': 'audio/webm' });
    chunks = [];

    var blobObject = {
      blob: blob,
      startTime: startTime,
      stopTime: Date.now(),
      blobURL: window.URL.createObjectURL(blob)
    };

    onStopCallback(blobObject);
  };

  return MicrophoneRecorder;
}();