'use strict';

exports.__esModule = true;
exports.default = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReactSimpleTimer = function (_Component) {
  _inherits(ReactSimpleTimer, _Component);

  function ReactSimpleTimer() {
    _classCallCheck(this, ReactSimpleTimer);

    var _this = _possibleConstructorReturn(this, _Component.call(this));

    _this.state = {
      time: 0,
      play: false,
      timeType: 0,
      title: ''
    };
    // Bind early, avoid function creation on render loop
    _this.start = _this.start.bind(_this);
    _this.stop = _this.stop.bind(_this);
    _this.elapseTime = _this.elapseTime.bind(_this);
    return _this;
  }

  ReactSimpleTimer.prototype.componentDidMount = function componentDidMount() {
    if (this.props.play) {
      this.start();
    }
  };

  ReactSimpleTimer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.play) {
      this.start();
    } else {
      this.stop();
    }
  };

  ReactSimpleTimer.prototype.elapseTime = function elapseTime() {
    if (this.state.play === true) {
      var newState = this.state.time + 1;
      this.setState({ time: newState });
    }
  };

  ReactSimpleTimer.prototype.format = function format(seconds) {
    var m = Math.floor(seconds % 3600 / 60);
    var s = Math.floor(seconds % 3600 % 60);
    var timeFormated = (m < 10 ? "0" : "") + m + ":" + (s < 10 ? "0" : "") + s;
    return timeFormated;
  };

  ReactSimpleTimer.prototype.restartInterval = function restartInterval() {
    clearInterval(this.interval);
    this.interval = setInterval(this.elapseTime, 1000);
  };

  ReactSimpleTimer.prototype.start = function start() {
    if (true === this.state.play) return;

    this.restartInterval();

    this.setState({
      play: true
    });
  };

  ReactSimpleTimer.prototype.stop = function stop() {
    var resetFor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.time;

    clearInterval(this.interval);
    var time = this.format(resetFor);
    this.setState({ play: false, time: 0 });
  };

  ReactSimpleTimer.prototype.render = function render() {
    return _react2.default.createElement(
      'div',
      { className: 'display timer' },
      _react2.default.createElement(
        'span',
        { className: 'time' },
        this.format(this.state.time)
      )
    );
  };

  return ReactSimpleTimer;
}(_react.Component);

exports.default = ReactSimpleTimer;
;
module.exports = exports['default'];